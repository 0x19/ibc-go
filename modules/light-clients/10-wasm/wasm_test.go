package wasm_test

import (
	"encoding/hex"
	"math"
	"os"
	"testing"
	"time"

	_go "github.com/confio/ics23/go"
	"github.com/cosmos/cosmos-sdk/codec"
	sdk "github.com/cosmos/cosmos-sdk/types"
	clienttypes "github.com/cosmos/ibc-go/v5/modules/core/02-client/types"
	commitmenttypes "github.com/cosmos/ibc-go/v5/modules/core/23-commitment/types"
	"github.com/cosmos/ibc-go/v5/modules/core/exported"
	wasm "github.com/cosmos/ibc-go/v5/modules/light-clients/10-wasm/types"
	ibctesting "github.com/cosmos/ibc-go/v5/testing"
	"github.com/cosmos/ibc-go/v5/testing/simapp"
	"github.com/stretchr/testify/suite"
	tmproto "github.com/tendermint/tendermint/proto/tendermint/types"
)

type WasmTestSuite struct {
	suite.Suite
	coordinator *ibctesting.Coordinator
	wasm        *ibctesting.Wasm // singlesig public key
	// Tendermint chain
	chainA *ibctesting.TestChain
	// Grandpa chain
	chainB         *ibctesting.TestChain
	ctx            sdk.Context
	cdc            codec.Codec
	now            time.Time
	store          sdk.KVStore
	clientState    wasm.ClientState
	consensusState wasm.ConsensusState
	codeId         []byte
}

func (suite *WasmTestSuite) SetupTest() {
	suite.coordinator = ibctesting.NewCoordinator(suite.T(), 2)
	suite.chainA = suite.coordinator.GetChain(ibctesting.GetChainID(1))
	suite.chainB = suite.coordinator.GetChain(ibctesting.GetChainID(2))

	suite.wasm = ibctesting.NewWasm(suite.T(), suite.chainA.Codec, "wasmsingle", "testing", 1)
	// suite.solomachineMulti = ibctesting.NewSolomachine(suite.T(), suite.chainA.Codec, "solomachinemulti", "testing", 4)

	// commit some blocks so that QueryProof returns valid proof (cannot return valid query if height <= 1)
	suite.coordinator.CommitNBlocks(suite.chainA, 2)
	suite.coordinator.CommitNBlocks(suite.chainB, 2)

	// TODO: deprecate usage in favor of testing package
	checkTx := false
	app := simapp.Setup(checkTx)
	suite.cdc = app.AppCodec()
	suite.now = time.Date(2020, 1, 2, 0, 0, 0, 0, time.UTC)
	suite.ctx = app.BaseApp.NewContext(checkTx, tmproto.Header{Height: 1, Time: suite.now}).WithGasMeter(sdk.NewInfiniteGasMeter())
	wasmConfig := wasm.VMConfig{
		DataDir:           "tmp",
		SupportedFeatures: []string{"storage", "iterator"},
		MemoryLimitMb:     uint32(math.Pow(2, 12)),
		PrintDebug:        true,
		CacheSizeMb:       uint32(math.Pow(2, 8)),
	}
	validationConfig := wasm.ValidationConfig{
		MaxSizeAllowed: int(math.Pow(2, 26)),
	}
	suite.store = suite.chainA.App.GetIBCKeeper().ClientKeeper.ClientStore(suite.chainA.GetContext(), exported.Wasm)
	data, err := hex.DecodeString("0a2031ec6480de493749ba9891a69d1f03705baf6eb983cf736595e013a1e1a50b0e10cd011804280230d00f384f42240a2088dc3417d5058ec4b4503e0c12ea1a0a89be200fe98922423d4334014fa6b0ee100142240a20d17c2d7823ebf260fd138f2d7e27d114c0145d968b5ff5006125f2414fadae69100142240a20439660b36c6c03afafca027b910b4fecf99801834c62a5e6006f27d978de234f100142240a205e639b43e0052c47447dac87d6fd2b6ec50bdd4d0f614e4299c665249bbd09d9100142240a201dfe3e22cc0d45c70779c1095f7489a8ef3cf52d62fbd8c2fa38c9f1723502b5100142240a20568cb4a574c6d178feb39c27dfc8b3f789e5f5423e19c71633c748b9acf086b51001")
	suite.Require().NoError(err)
	clientState := wasm.ClientState{
		Data: data,
		LatestHeight: &clienttypes.Height{
			RevisionNumber: 1,
			RevisionHeight: 2,
		},
		ProofSpecs: []*_go.ProofSpec{
			{
				LeafSpec: &_go.LeafOp{
					Hash:         _go.HashOp_SHA256,
					Length:       _go.LengthOp_FIXED32_BIG,
					PrehashValue: _go.HashOp_SHA256,
					Prefix:       []byte{0},
				},
				InnerSpec: &_go.InnerSpec{
					ChildOrder:      []int32{0, 1},
					ChildSize:       33,
					MinPrefixLength: 4,
					MaxPrefixLength: 12,
					EmptyChild:      nil,
					Hash:            _go.HashOp_SHA256,
				},
				MaxDepth: 0,
				MinDepth: 0,
			},
		},
		Repository: "test",
	}
	os.MkdirAll("tmp", 0o755)
	wasm.CreateVM(&wasmConfig, &validationConfig)
	data, err = os.ReadFile("ics10_grandpa_cw.wasm")
	suite.Require().NoError(err)

	err = wasm.PushNewWasmCode(suite.store, &clientState, data)
	suite.Require().NoError(err)
	suite.clientState = clientState
	data, err = hex.DecodeString("0a0b08e483ee9b0610c0eea219122073e5045222d49710bf59be580389245e9f7fc67c86b9263eee9578bfa0205df7")
	suite.Require().NoError(err)
	consensusState := wasm.ConsensusState{
		Data:      data,
		CodeId:    clientState.CodeId,
		Timestamp: uint64(suite.now.UnixNano()),
		Root: &commitmenttypes.MerkleRoot{
			Hash: []byte{0},
		},
	}
	suite.consensusState = consensusState
	suite.codeId = clientState.CodeId
	// err = clientState.Initialize(suite.ctx, suite.cdc, suite.store, &consensusState)
	// suite.Require().NoError(err)

	// err = clientState.VerifyClientMessage()

	/*
		path := ibctesting.NewPath(suite.chainA, suite.chainB)
		// path.EndpointA.ClientID = "unnamed_client_a"
		// path.EndpointB.ClientID = "unnamed_client_b"
		// endpointA := ibctesting.NewDefaultEndpoint(suite.chainA)
		// endpointA.ClientID = "unnamed_client_a"
		// endpointB := ibctesting.NewDefaultEndpoint(suite.chainB)
		// endpointB.ClientID = "unnamed_client_b"
		fmt.Println("A", path.EndpointA.ClientConfig.GetClientType())
		path.EndpointB.ClientConfig = ibctesting.NewWasmConfig()
		fmt.Println("B", path.EndpointB.ClientConfig.GetClientType())
		suite.Require().NoError(err)
		msg, err := clienttypes.NewMsgCreateClient(&clientState, &consensusState, path.EndpointA.Chain.SenderAccount.GetAddress().String())
		suite.Require().NoError(err)
		res, err := suite.chainA.SendMsgs(msg)
		suite.Require().NoError(err)
		path.EndpointA.ClientID, err = ibctesting.ParseClientIDFromEvents(res.GetEvents())
		suite.Require().NoError(err)

		suite.Require().NoError(err)
		msg, err = clienttypes.NewMsgCreateClient(&clientState, &consensusState, path.EndpointB.Chain.SenderAccount.GetAddress().String())
		suite.Require().NoError(err)
		res, err = suite.chainB.SendMsgs(msg)
		suite.Require().NoError(err)
		path.EndpointB.ClientID, err = ibctesting.ParseClientIDFromEvents(res.GetEvents())
		suite.Require().NoError(err)

		err = path.EndpointA.ConnOpenInit()
		suite.Require().NoError(err)

		err = path.EndpointB.ConnOpenTry()
		suite.Require().NoError(err)

		err = path.EndpointA.ConnOpenAck()
		suite.Require().NoError(err)

		err = path.EndpointB.ConnOpenConfirm()
		suite.Require().NoError(err)

		// ensure counterparty is up to date
		// err = path.EndpointA.UpdateClient()
		// suite.Require().NoError(err)

		// header := wasm.Header{
		// 	Data: []byte{0},
		// 	Height: &clienttypes.Height{
		// 		RevisionNumber: 1,
		// 		RevisionHeight: 2,
		// 	},
		// }
		// msg, err := clienttypes.NewMsgUpdateClient(
		// 	endpointA.ClientID, &header,
		// 	suite.chainA.SenderAccount.GetAddress().String(),
		// )
		// endpointA.ClientConfig = &ibctesting.WasmConfig{
		// 	InitClientState:    clientState,
		// 	InitConsensusState: consensusState,
		// }
		println(res)
	*/
}

func (suite *WasmTestSuite) TestVerifyClientMessageHeader() {
	var (
		clientMsg   exported.ClientMessage
		clientState *wasm.ClientState
	)

	// test singlesig and multisig public keys
	for _, wm := range []*ibctesting.Wasm{suite.wasm} {
		testCases := []struct {
			name    string
			setup   func()
			expPass bool
		}{
			{
				"successful header",
				func() {
					data, err := hex.DecodeString("")
					suite.Require().NoError(err)
					clientMsg = &wasm.Header{
						Data: data,
						Height: &clienttypes.Height{
							RevisionNumber: 1,
							RevisionHeight: 2,
						},
					}
					println(wm.ClientID)
					// clientMsg = wm.CreateHeader(wm.Diversifier)
				},
				true,
			},
			/*
				{
					"successful header with new diversifier",
					func() {
						clientMsg = sm.CreateHeader(sm.Diversifier + "0")
					},
					true,
				},
				{
					"successful misbehaviour",
					func() {
						clientMsg = sm.CreateMisbehaviour()
					},
					true,
				},
				{
					"invalid client message type",
					func() {
						clientMsg = &ibctm.Header{}
					},
					false,
				},
				{
					"wrong sequence in header",
					func() {
						// store in temp before assigning to interface type
						h := sm.CreateHeader(sm.Diversifier)
						h.Sequence++
						clientMsg = h
					},
					false,
				},
				{
					"invalid header Signature",
					func() {
						h := sm.CreateHeader(sm.Diversifier)
						h.Signature = suite.GetInvalidProof()
						clientMsg = h
					}, false,
				},
				{
					"invalid timestamp in header",
					func() {
						h := sm.CreateHeader(sm.Diversifier)
						h.Timestamp--
						clientMsg = h
					}, false,
				},
				{
					"signature uses wrong sequence",
					func() {
						sm.Sequence++
						clientMsg = sm.CreateHeader(sm.Diversifier)
					},
					false,
				},
				{
					"signature uses new pubkey to sign",
					func() {
						// store in temp before assinging to interface type
						cs := sm.ClientState()
						h := sm.CreateHeader(sm.Diversifier)

						publicKey, err := codectypes.NewAnyWithValue(sm.PublicKey)
						suite.NoError(err)

						data := &solomachine.HeaderData{
							NewPubKey:      publicKey,
							NewDiversifier: h.NewDiversifier,
						}

						dataBz, err := suite.chainA.Codec.Marshal(data)
						suite.Require().NoError(err)

						// generate invalid signature
						signBytes := &solomachine.SignBytes{
							Sequence:    cs.Sequence,
							Timestamp:   sm.Time,
							Diversifier: sm.Diversifier,
							Path:        []byte("invalid signature data"),
							Data:        dataBz,
						}

						signBz, err := suite.chainA.Codec.Marshal(signBytes)
						suite.Require().NoError(err)

						sig := sm.GenerateSignature(signBz)
						suite.Require().NoError(err)
						h.Signature = sig

						clientState = cs
						clientMsg = h
					},
					false,
				},
				{
					"signature signs over old pubkey",
					func() {
						// store in temp before assinging to interface type
						cs := sm.ClientState()
						oldPubKey := sm.PublicKey
						h := sm.CreateHeader(sm.Diversifier)

						// generate invalid signature
						data := append(sdk.Uint64ToBigEndian(cs.Sequence), oldPubKey.Bytes()...)
						sig := sm.GenerateSignature(data)
						h.Signature = sig

						clientState = cs
						clientMsg = h
					},
					false,
				},
				{
					"consensus state public key is nil - header",
					func() {
						clientState.ConsensusState.PublicKey = nil
						clientMsg = sm.CreateHeader(sm.Diversifier)
					},
					false,
				},
			*/
		}

		for _, tc := range testCases {
			tc := tc

			suite.Run(tc.name, func() {
				clientState = &suite.clientState // wm.ClientState()

				// setup test
				tc.setup()

				err := clientState.VerifyClientMessage(suite.chainA.GetContext(), suite.chainA.Codec, suite.store, clientMsg)

				if tc.expPass {
					suite.Require().NoError(err)
				} else {
					suite.Require().Error(err)
				}
			})
		}
	}
}

func (suite *WasmTestSuite) TestWasm() {
	suite.Run("Init contract", func() {
		suite.SetupTest()
	})
}

func TestWasmTestSuite(t *testing.T) {
	suite.Run(t, new(WasmTestSuite))
}
