// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/core/channel/v1/upgrade.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v7/modules/core/02-client/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UpgradeTimeout defines a type which encapsulates the upgrade timeout values at which the counterparty
// must no longer proceed with the upgrade handshake.
type UpgradeTimeout struct {
	// block height after which the upgrade times out
	TimeoutHeight types.Height `protobuf:"bytes,1,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height"`
	// block timestamp (in nanoseconds) after which the upgrade times out
	TimeoutTimestamp uint64 `protobuf:"varint,2,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty"`
}

func (m *UpgradeTimeout) Reset()         { *m = UpgradeTimeout{} }
func (m *UpgradeTimeout) String() string { return proto.CompactTextString(m) }
func (*UpgradeTimeout) ProtoMessage()    {}
func (*UpgradeTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb1cef68588848b2, []int{0}
}
func (m *UpgradeTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeTimeout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeTimeout.Merge(m, src)
}
func (m *UpgradeTimeout) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeTimeout proto.InternalMessageInfo

func (m *UpgradeTimeout) GetTimeoutHeight() types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return types.Height{}
}

func (m *UpgradeTimeout) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

// ErrorReceipt defines a type which encapsulates the upgrade sequence and error associated with the
// upgrade handshake failure. When a channel upgrade handshake is aborted both chains are expected to increment to the
// next sequence.
type ErrorReceipt struct {
	// the channel upgrade sequence
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// the error message detailing the cause of failure
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ErrorReceipt) Reset()         { *m = ErrorReceipt{} }
func (m *ErrorReceipt) String() string { return proto.CompactTextString(m) }
func (*ErrorReceipt) ProtoMessage()    {}
func (*ErrorReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb1cef68588848b2, []int{1}
}
func (m *ErrorReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorReceipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorReceipt.Merge(m, src)
}
func (m *ErrorReceipt) XXX_Size() int {
	return m.Size()
}
func (m *ErrorReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorReceipt proto.InternalMessageInfo

func (m *ErrorReceipt) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *ErrorReceipt) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*UpgradeTimeout)(nil), "ibc.core.channel.v1.UpgradeTimeout")
	proto.RegisterType((*ErrorReceipt)(nil), "ibc.core.channel.v1.ErrorReceipt")
}

func init() { proto.RegisterFile("ibc/core/channel/v1/upgrade.proto", fileDescriptor_fb1cef68588848b2) }

var fileDescriptor_fb1cef68588848b2 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xbf, 0x4e, 0xeb, 0x30,
	0x14, 0x87, 0xe3, 0xab, 0xea, 0x02, 0x06, 0x2a, 0x08, 0x0c, 0x55, 0x86, 0xb4, 0x74, 0xaa, 0x84,
	0x6a, 0x53, 0x40, 0x42, 0xac, 0x15, 0x08, 0xe6, 0x50, 0x16, 0x16, 0x94, 0xb8, 0x47, 0x8e, 0xa5,
	0x26, 0x27, 0xc4, 0x4e, 0x24, 0x5e, 0x80, 0x99, 0xc7, 0xea, 0xd8, 0x91, 0x09, 0xa1, 0xf6, 0x45,
	0x50, 0xe2, 0x84, 0x4e, 0x3e, 0x7f, 0x3e, 0x7f, 0x47, 0xfa, 0xd1, 0x33, 0x15, 0x09, 0x2e, 0x30,
	0x07, 0x2e, 0xe2, 0x30, 0x4d, 0x61, 0xc1, 0xcb, 0x09, 0x2f, 0x32, 0x99, 0x87, 0x73, 0x60, 0x59,
	0x8e, 0x06, 0xdd, 0x13, 0x15, 0x09, 0x56, 0x21, 0xac, 0x41, 0x58, 0x39, 0xf1, 0x4e, 0x25, 0x4a,
	0xac, 0xf7, 0xbc, 0xaa, 0x2c, 0xea, 0xf5, 0xb7, 0xb6, 0x85, 0x82, 0xd4, 0x54, 0x32, 0x5b, 0x59,
	0x60, 0xf8, 0x41, 0x68, 0xf7, 0xd9, 0xda, 0x67, 0x2a, 0x01, 0x2c, 0x8c, 0xfb, 0x40, 0xbb, 0xc6,
	0x96, 0xaf, 0x31, 0x28, 0x19, 0x9b, 0x1e, 0x19, 0x90, 0xd1, 0xfe, 0xa5, 0xc7, 0xb6, 0x77, 0xad,
	0xa2, 0x9c, 0xb0, 0xc7, 0x9a, 0x98, 0x76, 0x96, 0xdf, 0x7d, 0x27, 0x38, 0x6c, 0xfe, 0xd9, 0xa1,
	0x7b, 0x4e, 0x8f, 0x5b, 0x51, 0xf5, 0x6a, 0x13, 0x26, 0x59, 0xef, 0xdf, 0x80, 0x8c, 0x3a, 0xc1,
	0x51, 0xb3, 0x98, 0xb5, 0xf3, 0xe1, 0x1d, 0x3d, 0xb8, 0xcf, 0x73, 0xcc, 0x03, 0x10, 0xa0, 0x32,
	0xe3, 0x7a, 0x74, 0x57, 0xc3, 0x5b, 0x01, 0xa9, 0x80, 0xfa, 0x7e, 0x27, 0xf8, 0xeb, 0xdd, 0x1e,
	0xdd, 0x49, 0x40, 0xeb, 0x50, 0x42, 0xad, 0xdb, 0x0b, 0xda, 0x76, 0xfa, 0xb4, 0x5c, 0xfb, 0x64,
	0xb5, 0xf6, 0xc9, 0xcf, 0xda, 0x27, 0x9f, 0x1b, 0xdf, 0x59, 0x6d, 0x7c, 0xe7, 0x6b, 0xe3, 0x3b,
	0x2f, 0xb7, 0x52, 0x99, 0xb8, 0x88, 0x98, 0xc0, 0x84, 0x0b, 0xd4, 0x09, 0x6a, 0xae, 0x22, 0x31,
	0x96, 0xc8, 0xcb, 0x1b, 0x9e, 0xe0, 0xbc, 0x58, 0x80, 0xb6, 0x49, 0x5d, 0x5c, 0x8f, 0xdb, 0xe8,
	0xcd, 0x7b, 0x06, 0x3a, 0xfa, 0x5f, 0x47, 0x75, 0xf5, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x67, 0x26,
	0xdc, 0xa5, 0x9b, 0x01, 0x00, 0x00,
}

func (m *UpgradeTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintUpgrade(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUpgrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ErrorReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sequence != 0 {
		i = encodeVarintUpgrade(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUpgrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovUpgrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpgradeTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovUpgrade(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovUpgrade(uint64(m.TimeoutTimestamp))
	}
	return n
}

func (m *ErrorReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovUpgrade(uint64(m.Sequence))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	return n
}

func sovUpgrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpgrade(x uint64) (n int) {
	return sovUpgrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpgradeTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpgrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpgrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUpgrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUpgrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUpgrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpgrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUpgrade = fmt.Errorf("proto: unexpected end of group")
)
